import {
  __publicField
} from "./chunk-F3FYYIAV.js";

// node_modules/lenis/dist/lenis.mjs
var t = function() {
  return t = Object.assign || function(t2) {
    for (var e2, i2 = 1, o2 = arguments.length; i2 < o2; i2++)
      for (var s in e2 = arguments[i2])
        Object.prototype.hasOwnProperty.call(e2, s) && (t2[s] = e2[s]);
    return t2;
  }, t.apply(this, arguments);
};
function e(t2, e2, i2) {
  return Math.max(t2, Math.min(e2, i2));
}
var Animate = class {
  advance(t2) {
    var _a;
    if (!this.isRunning)
      return;
    let i2 = false;
    if (this.lerp)
      this.value = (o2 = this.value, s = this.to, n = 60 * this.lerp, r = t2, function(t3, e2, i3) {
        return (1 - i3) * t3 + i3 * e2;
      }(o2, s, 1 - Math.exp(-n * r))), Math.round(this.value) === this.to && (this.value = this.to, i2 = true);
    else {
      this.currentTime += t2;
      const o3 = e(0, this.currentTime / this.duration, 1);
      i2 = o3 >= 1;
      const s2 = i2 ? 1 : this.easing(o3);
      this.value = this.from + (this.to - this.from) * s2;
    }
    var o2, s, n, r;
    (_a = this.onUpdate) == null ? void 0 : _a.call(this, this.value, i2), i2 && this.stop();
  }
  stop() {
    this.isRunning = false;
  }
  fromTo(t2, e2, { lerp: i2 = 0.1, duration: o2 = 1, easing: s = (t3) => t3, onStart: n, onUpdate: r }) {
    this.from = this.value = t2, this.to = e2, this.lerp = i2, this.duration = o2, this.easing = s, this.currentTime = 0, this.isRunning = true, n == null ? void 0 : n(), this.onUpdate = r;
  }
};
var Dimensions = class {
  constructor({ wrapper: t2, content: e2, autoResize: i2 = true, debounce: o2 = 250 } = {}) {
    __publicField(this, "resize", () => {
      this.onWrapperResize(), this.onContentResize();
    });
    __publicField(this, "onWrapperResize", () => {
      this.wrapper === window ? (this.width = window.innerWidth, this.height = window.innerHeight) : (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight);
    });
    __publicField(this, "onContentResize", () => {
      this.wrapper === window ? (this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth) : (this.scrollHeight = this.wrapper.scrollHeight, this.scrollWidth = this.wrapper.scrollWidth);
    });
    this.wrapper = t2, this.content = e2, i2 && (this.debouncedResize = /* @__PURE__ */ function(t3, e3) {
      let i3;
      return function() {
        let o3 = arguments, s = this;
        clearTimeout(i3), i3 = setTimeout(function() {
          t3.apply(s, o3);
        }, e3);
      };
    }(this.resize, o2), this.wrapper === window ? window.addEventListener("resize", this.debouncedResize, false) : (this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(this.debouncedResize), this.contentResizeObserver.observe(this.content)), this.resize();
  }
  destroy() {
    var _a, _b;
    (_a = this.wrapperResizeObserver) == null ? void 0 : _a.disconnect(), (_b = this.contentResizeObserver) == null ? void 0 : _b.disconnect(), window.removeEventListener("resize", this.debouncedResize, false);
  }
  get limit() {
    return { x: this.scrollWidth - this.width, y: this.scrollHeight - this.height };
  }
};
var Emitter = class {
  constructor() {
    this.events = {};
  }
  emit(t2, ...e2) {
    let i2 = this.events[t2] || [];
    for (let t3 = 0, o2 = i2.length; t3 < o2; t3++)
      i2[t3](...e2);
  }
  on(t2, e2) {
    var _a;
    return ((_a = this.events[t2]) == null ? void 0 : _a.push(e2)) || (this.events[t2] = [e2]), () => {
      var _a2;
      this.events[t2] = (_a2 = this.events[t2]) == null ? void 0 : _a2.filter((t3) => e2 !== t3);
    };
  }
  off(t2, e2) {
    var _a;
    this.events[t2] = (_a = this.events[t2]) == null ? void 0 : _a.filter((t3) => e2 !== t3);
  }
  destroy() {
    this.events = {};
  }
};
var i = 100 / 6;
var VirtualScroll = class {
  constructor(t2, { wheelMultiplier: e2 = 1, touchMultiplier: i2 = 1 }) {
    __publicField(this, "onTouchStart", (t2) => {
      const { clientX: e2, clientY: i2 } = t2.targetTouches ? t2.targetTouches[0] : t2;
      this.touchStart.x = e2, this.touchStart.y = i2, this.lastDelta = { x: 0, y: 0 }, this.emitter.emit("scroll", { deltaX: 0, deltaY: 0, event: t2 });
    });
    __publicField(this, "onTouchMove", (t2) => {
      const { clientX: e2, clientY: i2 } = t2.targetTouches ? t2.targetTouches[0] : t2, o2 = -(e2 - this.touchStart.x) * this.touchMultiplier, s = -(i2 - this.touchStart.y) * this.touchMultiplier;
      this.touchStart.x = e2, this.touchStart.y = i2, this.lastDelta = { x: o2, y: s }, this.emitter.emit("scroll", { deltaX: o2, deltaY: s, event: t2 });
    });
    __publicField(this, "onTouchEnd", (t2) => {
      this.emitter.emit("scroll", { deltaX: this.lastDelta.x, deltaY: this.lastDelta.y, event: t2 });
    });
    __publicField(this, "onWheel", (t2) => {
      let { deltaX: e2, deltaY: o2, deltaMode: s } = t2;
      e2 *= 1 === s ? i : 2 === s ? this.windowWidth : 1, o2 *= 1 === s ? i : 2 === s ? this.windowHeight : 1, e2 *= this.wheelMultiplier, o2 *= this.wheelMultiplier, this.emitter.emit("scroll", { deltaX: e2, deltaY: o2, event: t2 });
    });
    __publicField(this, "onWindowResize", () => {
      this.windowWidth = window.innerWidth, this.windowHeight = window.innerHeight;
    });
    this.element = t2, this.wheelMultiplier = e2, this.touchMultiplier = i2, this.touchStart = { x: null, y: null }, this.emitter = new Emitter(), window.addEventListener("resize", this.onWindowResize, false), this.onWindowResize(), this.element.addEventListener("wheel", this.onWheel, { passive: false }), this.element.addEventListener("touchstart", this.onTouchStart, { passive: false }), this.element.addEventListener("touchmove", this.onTouchMove, { passive: false }), this.element.addEventListener("touchend", this.onTouchEnd, { passive: false });
  }
  on(t2, e2) {
    return this.emitter.on(t2, e2);
  }
  destroy() {
    this.emitter.destroy(), window.removeEventListener("resize", this.onWindowResize, false), this.element.removeEventListener("wheel", this.onWheel, { passive: false }), this.element.removeEventListener("touchstart", this.onTouchStart, { passive: false }), this.element.removeEventListener("touchmove", this.onTouchMove, { passive: false }), this.element.removeEventListener("touchend", this.onTouchEnd, { passive: false });
  }
};
var o = function() {
  function i2(e2) {
    var i3 = void 0 === e2 ? {} : e2, o2 = i3.wrapper, s = void 0 === o2 ? window : o2, n = i3.content, r = void 0 === n ? document.documentElement : n, l = i3.wheelEventsTarget, h = void 0 === l ? s : l, a = i3.eventsTarget, c = void 0 === a ? h : a, p = i3.smoothWheel, u = void 0 === p || p, d = i3.syncTouch, m = void 0 !== d && d, v = i3.syncTouchLerp, g = void 0 === v ? 0.075 : v, f = i3.touchInertiaMultiplier, S = void 0 === f ? 35 : f, w = i3.duration, y = i3.easing, b = void 0 === y ? function(t2) {
      return Math.min(1, 1.001 - Math.pow(2, -10 * t2));
    } : y, _ = i3.lerp, z = void 0 === _ ? !w && 0.1 : _, E = i3.infinite, T = void 0 !== E && E, L = i3.orientation, M = void 0 === L ? "vertical" : L, R = i3.gestureOrientation, O = void 0 === R ? "vertical" : R, W = i3.touchMultiplier, x = void 0 === W ? 1 : W, H = i3.wheelMultiplier, N = void 0 === H ? 1 : H, k = i3.autoResize, C = void 0 === k || k, j = i3.__experimental__naiveDimensions, P = void 0 !== j && j, D = this;
    this.__isSmooth = false, this.__isScrolling = false, this.__isStopped = false, this.__isLocked = false, this.onVirtualScroll = function(e3) {
      var i4 = e3.deltaX, o3 = e3.deltaY, s2 = e3.event;
      if (!s2.ctrlKey) {
        var n2 = s2.type.includes("touch"), r2 = s2.type.includes("wheel");
        if (D.options.syncTouch && n2 && "touchstart" === s2.type && !D.isStopped && !D.isLocked)
          D.reset();
        else {
          var l2 = 0 === i4 && 0 === o3, h2 = "vertical" === D.options.gestureOrientation && 0 === o3 || "horizontal" === D.options.gestureOrientation && 0 === i4;
          if (!l2 && !h2) {
            var a2 = s2.composedPath();
            if (!(a2 = a2.slice(0, a2.indexOf(D.rootElement))).find(function(t2) {
              var e4, i5, o4, s3, l3;
              return (null === (e4 = t2.hasAttribute) || void 0 === e4 ? void 0 : e4.call(t2, "data-lenis-prevent")) || n2 && (null === (i5 = t2.hasAttribute) || void 0 === i5 ? void 0 : i5.call(t2, "data-lenis-prevent-touch")) || r2 && (null === (o4 = t2.hasAttribute) || void 0 === o4 ? void 0 : o4.call(t2, "data-lenis-prevent-wheel")) || (null === (s3 = t2.classList) || void 0 === s3 ? void 0 : s3.contains("lenis")) && !(null === (l3 = t2.classList) || void 0 === l3 ? void 0 : l3.contains("lenis-stopped"));
            }))
              if (D.isStopped || D.isLocked)
                s2.preventDefault();
              else {
                if (D.isSmooth = D.options.syncTouch && n2 || D.options.smoothWheel && r2, !D.isSmooth)
                  return D.isScrolling = false, void D.animate.stop();
                s2.preventDefault();
                var c2 = o3;
                "both" === D.options.gestureOrientation ? c2 = Math.abs(o3) > Math.abs(i4) ? o3 : i4 : "horizontal" === D.options.gestureOrientation && (c2 = i4);
                var p2 = n2 && D.options.syncTouch, u2 = n2 && "touchend" === s2.type && Math.abs(c2) > 5;
                u2 && (c2 = D.velocity * D.options.touchInertiaMultiplier), D.scrollTo(D.targetScroll + c2, t({ programmatic: false }, p2 ? { lerp: u2 ? D.options.syncTouchLerp : 1 } : { lerp: D.options.lerp, duration: D.options.duration, easing: D.options.easing }));
              }
          }
        }
      }
    }, this.onNativeScroll = function() {
      if (!D.__preventNextScrollEvent && !D.isScrolling) {
        var t2 = D.animatedScroll;
        D.animatedScroll = D.targetScroll = D.actualScroll, D.velocity = 0, D.direction = Math.sign(D.animatedScroll - t2), D.emit();
      }
    }, window.lenisVersion = "1.0.44", s !== document.documentElement && s !== document.body || (s = window), this.options = { wrapper: s, content: r, wheelEventsTarget: h, eventsTarget: c, smoothWheel: u, syncTouch: m, syncTouchLerp: g, touchInertiaMultiplier: S, duration: w, easing: b, lerp: z, infinite: T, gestureOrientation: O, orientation: M, touchMultiplier: x, wheelMultiplier: N, autoResize: C, __experimental__naiveDimensions: P }, this.animate = new Animate(), this.emitter = new Emitter(), this.dimensions = new Dimensions({ wrapper: s, content: r, autoResize: C }), this.toggleClassName("lenis", true), this.velocity = 0, this.isLocked = false, this.isStopped = false, this.isSmooth = m || u, this.isScrolling = false, this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener("scroll", this.onNativeScroll, false), this.virtualScroll = new VirtualScroll(c, { touchMultiplier: x, wheelMultiplier: N }), this.virtualScroll.on("scroll", this.onVirtualScroll);
  }
  return i2.prototype.destroy = function() {
    this.emitter.destroy(), this.options.wrapper.removeEventListener("scroll", this.onNativeScroll, false), this.virtualScroll.destroy(), this.dimensions.destroy(), this.toggleClassName("lenis", false), this.toggleClassName("lenis-smooth", false), this.toggleClassName("lenis-scrolling", false), this.toggleClassName("lenis-stopped", false), this.toggleClassName("lenis-locked", false);
  }, i2.prototype.on = function(t2, e2) {
    return this.emitter.on(t2, e2);
  }, i2.prototype.off = function(t2, e2) {
    return this.emitter.off(t2, e2);
  }, i2.prototype.setScroll = function(t2) {
    this.isHorizontal ? this.rootElement.scrollLeft = t2 : this.rootElement.scrollTop = t2;
  }, i2.prototype.resize = function() {
    this.dimensions.resize();
  }, i2.prototype.emit = function() {
    this.emitter.emit("scroll", this);
  }, i2.prototype.reset = function() {
    this.isLocked = false, this.isScrolling = false, this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.animate.stop();
  }, i2.prototype.start = function() {
    this.isStopped && (this.isStopped = false, this.reset());
  }, i2.prototype.stop = function() {
    this.isStopped || (this.isStopped = true, this.animate.stop(), this.reset());
  }, i2.prototype.raf = function(t2) {
    var e2 = t2 - (this.time || t2);
    this.time = t2, this.animate.advance(1e-3 * e2);
  }, i2.prototype.scrollTo = function(t2, i3) {
    var o2 = this, s = void 0 === i3 ? {} : i3, n = s.offset, r = void 0 === n ? 0 : n, l = s.immediate, h = void 0 !== l && l, a = s.lock, c = void 0 !== a && a, p = s.duration, u = void 0 === p ? this.options.duration : p, d = s.easing, m = void 0 === d ? this.options.easing : d, v = s.lerp, g = void 0 === v ? !u && this.options.lerp : v, f = s.onComplete, S = s.force, w = void 0 !== S && S, y = s.programmatic, b = void 0 === y || y;
    if (!this.isStopped && !this.isLocked || w) {
      if (["top", "left", "start"].includes(t2))
        t2 = 0;
      else if (["bottom", "right", "end"].includes(t2))
        t2 = this.limit;
      else {
        var _ = void 0;
        if ("string" == typeof t2 ? _ = document.querySelector(t2) : (null == t2 ? void 0 : t2.nodeType) && (_ = t2), _) {
          if (this.options.wrapper !== window) {
            var z = this.options.wrapper.getBoundingClientRect();
            r -= this.isHorizontal ? z.left : z.top;
          }
          var E = _.getBoundingClientRect();
          t2 = (this.isHorizontal ? E.left : E.top) + this.animatedScroll;
        }
      }
      if ("number" == typeof t2) {
        if (t2 += r, t2 = Math.round(t2), this.options.infinite ? b && (this.targetScroll = this.animatedScroll = this.scroll) : t2 = e(0, t2, this.limit), h)
          return this.animatedScroll = this.targetScroll = t2, this.setScroll(this.scroll), this.reset(), void (null == f || f(this));
        if (!b) {
          if (t2 === this.targetScroll)
            return;
          this.targetScroll = t2;
        }
        this.animate.fromTo(this.animatedScroll, t2, { duration: u, easing: m, lerp: g, onStart: function() {
          c && (o2.isLocked = true), o2.isScrolling = true;
        }, onUpdate: function(t3, e2) {
          o2.isScrolling = true, o2.velocity = t3 - o2.animatedScroll, o2.direction = Math.sign(o2.velocity), o2.animatedScroll = t3, o2.setScroll(o2.scroll), b && (o2.targetScroll = t3), e2 || o2.emit(), e2 && (o2.reset(), o2.emit(), null == f || f(o2), o2.__preventNextScrollEvent = true, requestAnimationFrame(function() {
            delete o2.__preventNextScrollEvent;
          }));
        } });
      }
    }
  }, Object.defineProperty(i2.prototype, "rootElement", { get: function() {
    return this.options.wrapper === window ? document.documentElement : this.options.wrapper;
  }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "limit", { get: function() {
    return this.options.__experimental__naiveDimensions ? this.isHorizontal ? this.rootElement.scrollWidth - this.rootElement.clientWidth : this.rootElement.scrollHeight - this.rootElement.clientHeight : this.dimensions.limit[this.isHorizontal ? "x" : "y"];
  }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "isHorizontal", { get: function() {
    return "horizontal" === this.options.orientation;
  }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "actualScroll", { get: function() {
    return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;
  }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "scroll", { get: function() {
    return this.options.infinite ? (t2 = this.animatedScroll, e2 = this.limit, (t2 % e2 + e2) % e2) : this.animatedScroll;
    var t2, e2;
  }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "progress", { get: function() {
    return 0 === this.limit ? 1 : this.scroll / this.limit;
  }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "isSmooth", { get: function() {
    return this.__isSmooth;
  }, set: function(t2) {
    this.__isSmooth !== t2 && (this.__isSmooth = t2, this.toggleClassName("lenis-smooth", t2));
  }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "isScrolling", { get: function() {
    return this.__isScrolling;
  }, set: function(t2) {
    this.__isScrolling !== t2 && (this.__isScrolling = t2, this.toggleClassName("lenis-scrolling", t2));
  }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "isStopped", { get: function() {
    return this.__isStopped;
  }, set: function(t2) {
    this.__isStopped !== t2 && (this.__isStopped = t2, this.toggleClassName("lenis-stopped", t2));
  }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "isLocked", { get: function() {
    return this.__isLocked;
  }, set: function(t2) {
    this.__isLocked !== t2 && (this.__isLocked = t2, this.toggleClassName("lenis-locked", t2));
  }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "className", { get: function() {
    var t2 = "lenis";
    return this.isStopped && (t2 += " lenis-stopped"), this.isLocked && (t2 += " lenis-locked"), this.isScrolling && (t2 += " lenis-scrolling"), this.isSmooth && (t2 += " lenis-smooth"), t2;
  }, enumerable: false, configurable: true }), i2.prototype.toggleClassName = function(t2, e2) {
    this.rootElement.classList.toggle(t2, e2), this.emitter.emit("className change", this);
  }, i2;
}();
export {
  o as default
};
//# sourceMappingURL=lenis.js.map
